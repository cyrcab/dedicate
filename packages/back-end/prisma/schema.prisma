// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// url      = env("DATABASE_URL")

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/dedicate"
}

model Role {
  id      Int    @id @default(autoincrement())
  refRole String @unique
  users   User[]
}

model User {
  id                 Int             @id @default(autoincrement())
  nom                String
  prenom             String
  mail               String          @unique
  tel                String          @unique
  password           String
  dateN              DateTime?
  photo              String?
  typePaiement       String?
  Role               Role            @relation(fields: [roleId], references: [id])
  roleId             Int
  idEtablissement    Int?
  Etablissement      Etablissement?  @relation(fields: [idEtablissement], references: [id])
  enchere            Enchere[]
  events             Event[]         @relation("EventUser")
  lastScannedEventId Int?
  LastScannedEvent   Event?          @relation(name: "LastScannedEvent", fields: [lastScannedEventId], references: [id])
  dediCoins          Float           @default(0)
  paymentMethods     PaymentMethod[]
  transactions       Transaction[]

  Diffuser Diffuser[]
}

model Etablissement {
  id         Int     @id @default(autoincrement())
  nom        String
  adresse    String
  ville      String
  codePostal String
  events     Event[]
  User       User[]
}

model Diffuser {
  idMusique Int
  idEvent   Int
  slot      Int
  idUser    Int
  idEnchere Int
  Enchere   Enchere @relation(fields: [idEnchere], references: [id])
  User      User    @relation(fields: [idUser], references: [id])
  musique   Musique @relation(fields: [idMusique], references: [id])
  Event     Event   @relation(fields: [idEvent], references: [id])

  @@id([idMusique, idEvent, idUser, idEnchere])
}

model Musique {
  id           Int        @id @default(autoincrement())
  titre        String
  artiste      String
  album        String?
  countVote    Int
  countDiffuse Int
  diffuser     Diffuser[]
  enchere      Enchere[]
}

model Event {
  id               Int            @id @default(autoincrement())
  nom              String
  lieu             String
  date             DateTime
  type             String
  prix             Float
  nbSlots          Int
  photo            String?
  description      String?
  idEtablissement  Int?
  qrCode           String?        @db.VarChar(1800)
  isActive         Boolean        @default(true)
  Etablissement    Etablissement? @relation(fields: [idEtablissement], references: [id])
  diffuser         Diffuser[]
  enchere          Enchere[]
  User             User[]         @relation("EventUser")
  LastScannedUsers User[]         @relation("LastScannedEvent")
}

model Enchere {
  id        Int        @id @default(autoincrement())
  prix      Float
  idUser    Int
  idMusique Int
  idEvent   Int
  User      User       @relation(fields: [idUser], references: [id])
  Musique   Musique    @relation(fields: [idMusique], references: [id])
  Event     Event      @relation(fields: [idEvent], references: [id])
  Diffuser  Diffuser[]
}

model PaymentMethod {
  id         Int     @id @default(autoincrement())
  userId     Int
  cardNumber String  @db.VarChar(255)
  expDate    String
  isDefault  Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
}

model Transaction {
  id     Int      @id @default(autoincrement())
  userId Int
  amount Float // Montant en DediCoins de la transaction
  type   String // Peut Ãªtre "purchase" ou "spend"
  date   DateTime
  user   User     @relation(fields: [userId], references: [id])
}
